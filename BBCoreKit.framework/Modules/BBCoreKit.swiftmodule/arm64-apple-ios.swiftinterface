// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BBCoreKit
import CoreBluetooth
import CoreLocation
import CoreNFC
import Foundation
import Swift
import UIKit
import UserNotifications
import _Concurrency
public protocol BBResponseProtocol {
  init(response: Any?)
}
open class BBKeychainPersistenceManager {
  open var lastResultCode: Darwin.OSStatus
  open var accessGroup: Swift.String?
  public init()
  public init(keyPrefix: Swift.String)
  @discardableResult
  open func persist(_ value: Swift.String, forKey key: Swift.String, withAccess access: BBCoreKit.BBKKeychainStorageAttributeKey? = nil) -> Swift.Bool
  @discardableResult
  open func persist(_ data: Foundation.Data, forKey key: Swift.String, withAccess access: BBCoreKit.BBKKeychainStorageAttributeKey? = nil) -> Swift.Bool
  @discardableResult
  open func persist(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: BBCoreKit.BBKKeychainStorageAttributeKey? = nil) -> Swift.Bool
  open func loadData(forKey keyString: Swift.String) -> Foundation.Data?
  @discardableResult
  open func removeData(forKey keyString: Swift.String) -> Swift.Bool
  @discardableResult
  open func clear() -> Swift.Bool
  @objc deinit
}
public enum BBIoTCommand {
  case activate(value: Swift.Int)
  case custom(value: Swift.String)
  case dfu
  case listen
  case deactivate
  case ring
  case json(value: Swift.String)
}
extension CoreBluetooth.CBPeripheral {
  public func service(with uuid: BBCoreKit.BBIoTIdentifier) -> CoreBluetooth.CBService?
}
public struct BBItem {
  public var id: Swift.Int?
  public var identifier: Swift.String?
  public var imageUrl: Swift.String?
  public var state: Swift.String?
  public var stateId: Swift.Int?
  public var deviceId: Swift.Int?
  public var name: Swift.String?
  public var brandName: Swift.String?
  public var description: Swift.String?
  public var upc: Swift.String?
  public var sku: Swift.String?
  public var zone: Swift.String?
}
public struct BBKeychainPersistenceConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
}
public class BBCartManager {
  required public init(environment: BBCoreKit.BBEnvironment = BBEnvironment(host: BBEnvironmentURL.production))
  public func fetchCart(completion: @escaping ([BBCoreKit.BBCartData]?) -> Swift.Void, error: @escaping (Swift.String?, Swift.Int?) -> Swift.Void)
  @objc deinit
}
public enum DeviceType {
  case scanner
  case tag
  public static func == (a: BBCoreKit.DeviceType, b: BBCoreKit.DeviceType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct BBIoTDevice {
  public let compiledIdentifier: Swift.String
  public let id: Swift.Int?
  public let name: Swift.String?
  public let peripheral: CoreBluetooth.CBPeripheral
  public let iotPeripheral: BBCoreKit.BBIoTPeripheral?
  public let advertisementPacket: [Swift.String : Any]
  public let rssi: Swift.Int
  public let deviceType: BBCoreKit.DeviceType?
  public let state: Swift.String
  public let deviceInteraction: Swift.String
}
public class BBResponse : BBCoreKit.BBResponseProtocol {
  required public init(response: Any?)
  public var dictionaryValue: [Swift.String : Any]? {
    get
  }
  public var arrayValue: [Any]? {
    get
  }
  public var stringValue: Swift.String? {
    get
  }
  @objc deinit
}
public enum BBIoTIdentifier : Swift.String {
  case commandCharacteristic
  case capacitiveCharacteristic
  case bluetoothService
  case beaconService
  case scannerCommandCharacteristic
  case unknownCharacteristic
  case deviceInformationService
  case firmwareCharacteristic
  case hardwareCharacteristic
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BBIoTConnectionResult {
  case success(BBCoreKit.BBIoTDevice)
  case disconnected(BBCoreKit.BBIoTDevice)
  case cancelled
  case failure(Swift.Error)
}
public protocol BBInventoryManagerDelegate {
  func bbInventoryManagerDidPair(item: [Swift.String : Any]?, responseCode: Swift.Int?, error: Swift.String?)
  func bbInventoryManagerDidDeactivate(deviceWithResponse: [Swift.String : Any]?, responseCode: Swift.Int, error: Swift.String?)
  func bbInventoryManagerDidFetch(itemWithID: [Swift.String : Any]?, responseCode: Swift.Int, error: Swift.String?)
  func bbInventoryManagerDidFetch(deviceWithID: [Swift.String : Any]?, responseCode: Swift.Int, error: Swift.String?)
  func bbInventoryManagerDidFetchCloseProximity(items: [[Swift.String : Any]]?, responseCode: Swift.Int)
  func bbInventoryManagerDidFetchItemInformation(item: [Swift.String : Any]?, responseCode: Swift.Int, error: Swift.String?)
  func bbInventoryManagerDidFetchCount(items: [BBCoreKit.BBMonitoringItem])
  func bbInventoryManagerDidFetchCountWithItems(items: [Any])
  func bbInventoryManagerDidFetchSecureKey(secureKey: [Swift.String : Any], responseCode: Swift.Int, error: Swift.String)
}
extension BBCoreKit.BBInventoryManagerDelegate {
  public func bbInventoryManagerDidPair(item: [Swift.String : Any]?, responseCode: Swift.Int?, error: Swift.String?)
  public func bbInventoryManagerDidDeactivate(deviceWithResponse: [Swift.String : Any]?, responseCode: Swift.Int, error: Swift.String?)
  public func bbInventoryManagerDidFetch(itemWithID: [Swift.String : Any]?, responseCode: Swift.Int, error: Swift.String?)
  public func bbInventoryManagerDidFetch(deviceWithID: [Swift.String : Any]?, responseCode: Swift.Int, error: Swift.String?)
  public func bbInventoryManagerDidFetchCloseProximity(items: [[Swift.String : Any]]?, responseCode: Swift.Int)
  public func bbInventoryManagerDidFetchItemInformation(item: [Swift.String : Any]?, responseCode: Swift.Int, error: Swift.String?)
  public func bbInventoryManagerDidFetchCount(items: [BBCoreKit.BBMonitoringItem])
  public func bbInventoryManagerDidFetchCountWithItems(items: [Any])
  public func bbInventoryManagerDidFetchSecureKey(secureKey: [Swift.String : Any], responseCode: Swift.Int, error: Swift.String)
}
public class BBInventoryManager : BBCoreKit.BBNFCSessionDelegate {
  public var delegate: BBCoreKit.BBInventoryManagerDelegate?
  public var calibrationValue: Swift.Int?
  required public init(environment: BBCoreKit.BBEnvironment = BBEnvironment(host: BBEnvironmentURL.production))
  public func pair(deviceIdentifier: Swift.String, upc: Swift.String, completion: @escaping ([Swift.String : Any]?, Swift.Int?) -> Swift.Void, error: @escaping (Swift.String?, Swift.Int?) -> Swift.Void)
  public func bbNFCSessionDidRead(identifier: Swift.String, error: Swift.String)
  public func bbNFCSessionDidWrite(identifier: Swift.String, type: BBCoreKit.NFCTypes, error: Swift.String)
  public func bbNFCSessionDidSecureWrite(identifier: Swift.String, error: Swift.String, otc: Swift.String, commandType: Swift.String)
  @available(iOS 13.0, *)
  public func handleItemAssignmentWithNFC(upc: Swift.String, infoMessage: Swift.String, successMessage: Swift.String)
  @available(iOS 13.0, *)
  public func handleItemAssignmentWithSecureNFC(upc: Swift.String, infoMessage: Swift.String, successMessage: Swift.String)
  public func deviceDeactivation(deviceIdentifier: Swift.String, completion: @escaping ([Swift.String : Any]?, Swift.Int?) -> Swift.Void, error: @escaping (Swift.String?, Swift.Int?) -> Swift.Void)
  @available(iOS 13.0, *)
  public func deviceDeactivationWithNFC(infoMessage: Swift.String, successMessage: Swift.String)
  public func fetchDeviceId(deviceIdentifier: Swift.String, completion: @escaping (Swift.Int, Swift.Int?) -> Swift.Void, error: @escaping (Swift.String?, Swift.Int?) -> Swift.Void)
  public func fetchItemId(upc: Swift.String, completion: @escaping (Swift.Int, Swift.Int?) -> Swift.Void, error: @escaping (Swift.String?, Swift.Int?) -> Swift.Void)
  public func fetchCalibrationValue(itemId: Swift.Int, completion: @escaping (Swift.Int, Swift.Int?) -> Swift.Void, error: @escaping (Swift.String?, Swift.Int?) -> Swift.Void)
  public func fetchCloseProximityDevices(proximityLimit: Swift.Double, eventManager: BBCoreKit.BBEventManager) -> [Swift.String]
  public func fetchCloseProximityItems(proximityLimit: Swift.Double, eventManager: BBCoreKit.BBEventManager, completion: @escaping ([[Swift.String : Any]], Swift.Int) -> Swift.Void, error: @escaping (Swift.String?) -> Swift.Void)
  public func fetchCloseProximityItemsWithStock(proximityLimit: Swift.Double, eventManager: BBCoreKit.BBEventManager, completion: @escaping ([[Swift.String : Any]], Swift.Int) -> Swift.Void, error: @escaping (Swift.String?) -> Swift.Void)
  @available(iOS 13.0, *)
  public func fetchItemWithNFC(infoMessage: Swift.String, shouldFallbackToBluetooth: Swift.Bool = false, successMessage: Swift.String)
  public func fetchStockCount()
  public func fetchStockCountWithItems()
  @objc deinit
}
public class BBIoTSession {
  public var isBluetoothAvailable: Swift.Bool {
    get
  }
  public var isScanning: Swift.Bool {
    get
  }
  public init()
  public func start()
  public func scanForDevices(withServiceUUIDs serviceUUIDs: [BBCoreKit.BBIoTIdentifier] = [BBIoTIdentifier.bluetoothService], duration: Foundation.TimeInterval = 0, completion: @escaping (BBCoreKit.BBIoTDevice, [BBCoreKit.BBIoTDevice]) -> BBCoreKit.BBScanTask, stopped: @escaping ([BBCoreKit.BBIoTDevice], Swift.Error?) -> Swift.Void)
  public func disconnect(device: BBCoreKit.BBIoTDevice)
  public func stopScan()
  public func connect(device: BBCoreKit.BBIoTDevice, timeout: BBCoreKit.Timeout, completion: @escaping (BBCoreKit.BBIoTConnectionResult) -> Swift.Void)
  public func read(from identifier: BBCoreKit.BBIoTIdentifier, device: BBCoreKit.BBIoTDevice, completion: @escaping (Foundation.Data?, BBCoreKit.BBIoTError?) -> Swift.Void)
  public func write(to identifier: BBCoreKit.BBIoTIdentifier, command: BBCoreKit.BBIoTCommand, device: BBCoreKit.BBIoTDevice, completion: @escaping (Swift.Bool) -> Swift.Void)
  public func listen(to characteristicIdentifier: BBCoreKit.BBIoTIdentifier, device: BBCoreKit.BBIoTDevice, completion: @escaping (CoreBluetooth.CBCharacteristic?, Foundation.Data?) -> Swift.Void)
  public func listenRssi(device: BBCoreKit.BBIoTDevice, completion: @escaping (Swift.Int?) -> Swift.Void)
  @objc deinit
}
public protocol BBEventManagerDelegate : AnyObject {
  func didReceiveInteraction(data: BBCoreKit.BBEvent)
  func bluetoothAuthorizationDelegate(didChangeStatus: CoreLocation.CLAuthorizationStatus)
}
extension BBCoreKit.BBEventManagerDelegate {
  public func didReceiveInteraction(data: BBCoreKit.BBEvent)
  public func bluetoothAuthorizationDelegate(didChangeStatus: CoreLocation.CLAuthorizationStatus)
}
@objc @_hasMissingDesignatedInitializers public class BBEventManager : ObjectiveC.NSObject {
  public static var sharedInstance: BBCoreKit.BBEventManager!
  public static var delegate: BBCoreKit.BBEventManagerDelegate? {
    get
    set
  }
  public class func dispose()
  public class func initEventManager(environment: BBCoreKit.BBEnvironment = BBEnvironment(host: BBEnvironmentURL.production))
  public class func startSharing()
  public class func stopSharing()
  @objc deinit
}
extension BBCoreKit.BBEventManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didEnterRegion region: CoreLocation.CLRegion)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didExitRegion region: CoreLocation.CLRegion)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didRangeBeacons beacons: [CoreLocation.CLBeacon], in region: CoreLocation.CLBeaconRegion)
}
extension BBCoreKit.BBEventManager : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
}
public protocol BBRequestProtocol {
  associatedtype Response : BBCoreKit.BBResponse
  var urlPath: Swift.String { get }
  var parameters: [Swift.String : Any]? { get }
  var headers: [Swift.String : Swift.String]? { get }
  var passphrase: BBCoreKit.BBPassphrase? { get }
  var httpMethod: BBCoreKit.BBRequestHTTPMethod { get }
}
public enum BBRequestHTTPMethod : Swift.String {
  case GET
  case POST
  case PUT
  case DELETE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NFCTypes {
  case match
  case secureMatch
  case secureDeactivate
  case deactivate
  case reset
  case dfu
  public static func == (a: BBCoreKit.NFCTypes, b: BBCoreKit.NFCTypes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, *)
public protocol BBNFCSessionDelegate {
  func bbNFCSessionDidRead(identifier: Swift.String, error: Swift.String)
  func bbNFCSessionDidWrite(identifier: Swift.String, type: BBCoreKit.NFCTypes, error: Swift.String)
  func bbNFCSessionDidSecureWrite(identifier: Swift.String, otc: Swift.String, commandType: Swift.String, error: Swift.String)
}
@available(iOS 13.0, *)
extension BBCoreKit.BBNFCSessionDelegate {
  public func bbNFCSessionDidRead(identifier: Swift.String, error: Swift.String)
  public func bbNFCSessionDidWrite(identifier: Swift.String, type: BBCoreKit.NFCTypes, error: Swift.String)
  public func bbNFCSessionDidSecureWrite(identifier: Swift.String, otc: Swift.String, commandType: Swift.String, error: Swift.String)
}
@available(iOS 13.0, *)
public class BBNFCSession : BBCoreKit.BBNFCNDEFReaderSessionDelegate {
  public var readerSession: BBCoreKit.BBNFCNDEFReaderSession?
  public var ndefReaderSession: CoreNFC.NFCNDEFReaderSession?
  public var readDelegate: BBCoreKit.BBNFCSessionDelegate?
  public func bbNFCNDEFReaderSessionDidRead(identifier: Swift.String, error: Swift.String)
  public func bbNFCNDEFReaderSessionDidWrite(identifier: Swift.String, type: BBCoreKit.NFCTypes, error: Swift.String)
  public func bbNFCNDEFReaderSessionDidSecureWrite(identifier: Swift.String, otc: Swift.String, type: BBCoreKit.NFCTypes, commandType: Swift.String, error: Swift.String)
  required public init()
  public func start()
  public func write(type: BBCoreKit.NFCTypes, infoMessage: Swift.String, successMessage: Swift.String)
  public func read(infoMessage: Swift.String, successMessage: Swift.String)
  public func didWrite()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BBUtility {
  public static func byteArrayToHexString(_ byteArray: [Swift.UInt8]) -> Swift.String
  @objc deinit
}
@objc public class BBJsonWebToken : ObjectiveC.NSObject, Foundation.NSCoding {
  public var jsonWebToken: Swift.String
  final public let refreshDate: Foundation.Date
  final public let expirationDate: Foundation.Date
  public init(jsonWebToken: Swift.String, refreshDate: Foundation.Date = Date(), expirationDate: Foundation.Date = Date.distantFuture)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
extension BBCoreKit.BBJsonWebToken {
  public static var current: BBCoreKit.BBJsonWebToken? {
    get
    set(value)
  }
}
extension BBCoreKit.BBJsonWebToken {
  public static func fetchToken() -> BBCoreKit.BBJsonWebToken?
  public static func storeToken(token: BBCoreKit.BBJsonWebToken)
  public static func clearStorage()
}
public enum BBEncoderError : Swift.Error {
  case invalidURL
  public static func == (a: BBCoreKit.BBEncoderError, b: BBCoreKit.BBEncoderError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BBEncoder {
  public func buildRequest(request: BBCoreKit.BBRequest) throws -> Foundation.URLRequest
  @objc deinit
}
public struct BBMonitoringItem {
  public var identifier: Swift.String?
  public var storeId: Swift.Int?
  public var storeName: Swift.String?
  public var storeType: Swift.String?
}
public struct BBEnvironment {
  public var host: BBCoreKit.BBEnvironmentURL
  public var headers: [Swift.String : Any]
  public var cachePolicy: Foundation.URLRequest.CachePolicy
  public init(host: BBCoreKit.BBEnvironmentURL)
}
public enum BBEnvironmentURL : Swift.String {
  case production
  case local
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol BBRequestInterceptor {
  func intercept(_ request: Foundation.URLRequest) -> Foundation.URLRequest
}
public typealias RequestRetryCompletion = (_ shouldRetry: Swift.Bool) -> Swift.Void
public protocol BBRequestRetrier {
  func should(_ dispatcher: BBCoreKit.BBNetworkSession, request: BBCoreKit.BBRequest, response: Foundation.HTTPURLResponse, completion: @escaping BBCoreKit.RequestRetryCompletion)
}
public class BBRequest : BBCoreKit.BBRequestProtocol {
  public typealias Response = BBCoreKit.BBResponse
  public var urlPath: Swift.String
  public var parameters: [Swift.String : Any]?
  public var queryParameters: [Foundation.URLQueryItem]?
  public var passphrase: BBCoreKit.BBPassphrase?
  public var httpMethod: BBCoreKit.BBRequestHTTPMethod
  public var headers: [Swift.String : Swift.String]?
  public init(urlPath: Swift.String, parameters: [Swift.String : Any] = [:], queryParameters: [Foundation.URLQueryItem] = [], headers: [Swift.String : Swift.String] = ["Content-Type": "application/json"], accessToken: BBCoreKit.BBPassphrase? = BBPassphrase.current, httpMethod: BBCoreKit.BBRequestHTTPMethod = .GET)
  @objc deinit
}
public struct BBEvent {
  public var eventName: Swift.String?
  public var eventId: Swift.Int?
  public var shouldProcess: Swift.Bool?
  public var deviceIdentifier: Swift.String?
  public var zone: Swift.String?
  public var zoneId: Swift.Int?
  public var storeId: Swift.Int?
  public var storeName: Swift.String?
  public var barcode: Swift.String?
  public var userId: Swift.Int?
}
@_hasMissingDesignatedInitializers public class BBIoTScanSession {
  @objc deinit
}
public enum BBScanTask {
  case `continue`
  case stop
  case connect(BBCoreKit.BBIoTDevice, BBCoreKit.Timeout, (BBCoreKit.BBIoTConnectionResult) -> Swift.Void)
}
public class BBNetworkSession {
  public var encoder: BBCoreKit.BBEncoder
  public var environment: BBCoreKit.BBEnvironment
  public typealias Completion<T> = (_ httpResponse: Foundation.HTTPURLResponse?, _ result: BBCoreKit.BBRequestResult<T>) -> Swift.Void where T : BBCoreKit.BBRequestProtocol
  required public init(environment: BBCoreKit.BBEnvironment)
  public func execute<T>(request: BBCoreKit.BBRequest, completion: @escaping BBCoreKit.BBNetworkSession.Completion<T>) where T : BBCoreKit.BBRequestProtocol
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BBCoreKit {
  public class func setup(deviceID: Swift.String, passphrase: Swift.String)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class BBIoTPeripheral : ObjectiveC.NSObject {
  public var uuid: Swift.String?
  public var name: Swift.String?
  public func isListening(to characteristicIdentifier: Swift.String) -> Swift.Bool
  public func isReading(from characteristicIdentifier: Swift.String) -> Swift.Bool
  public func discoverCharactersitic(_ identifier: BBCoreKit.BBIoTIdentifier, callback: @escaping (CoreBluetooth.CBCharacteristic?, Foundation.Data?, BBCoreKit.BBIoTError?) -> Swift.Void)
  public func read(from identifier: BBCoreKit.BBIoTIdentifier, completion: @escaping (CoreBluetooth.CBCharacteristic?, Foundation.Data?, BBCoreKit.BBIoTError?) -> Swift.Void)
  public func write(to identifier: BBCoreKit.BBIoTIdentifier, command: BBCoreKit.BBIoTCommand, completion: @escaping (Swift.Bool) -> Swift.Void)
  public func getRssi(completion: @escaping ((Swift.Int?) -> Swift.Void))
  public func listen(to characteristicIdentifier: BBCoreKit.BBIoTIdentifier, completion: @escaping (CoreBluetooth.CBCharacteristic?, Foundation.Data?) -> Swift.Void)
  public func readRSSI()
  public func maximumWriteValueLength(for writeType: CoreBluetooth.CBCharacteristicWriteType) -> Swift.Int
  @objc deinit
}
extension BBCoreKit.BBIoTPeripheral : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheralDidUpdateRSSI(_ peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didReadRSSI RSSI: Foundation.NSNumber, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
}
public enum BBIoTError {
  case bluetoothUnavailable
  case connectionTimedOut
  case notConnected
  case missingService(BBCoreKit.BBIoTIdentifier)
  case missingCharacteristic(Swift.String)
  case cancelled
  case listenTimedOut
  case readFailed
  case writeFailed
  case unexpectedPeripheral(Swift.String)
  case missingData
  case dataOutOfBounds(start: Swift.Int, length: Swift.Int, count: Swift.Int)
  case missingServiceIdentifiersInBackground
  case multipleBackgroundTaskNotSupported
  case invalidDuration
  case stopped
}
extension BBCoreKit.BBIoTError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension BBCoreKit.BBIoTError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
extension Foundation.Date {
  public func toMillis() -> Swift.Int64
}
@objc public class BBPassphrase : ObjectiveC.NSObject, Foundation.NSCoding {
  final public let passphraseString: Swift.String
  final public let refreshDate: Foundation.Date
  final public let expirationDate: Foundation.Date
  public init(passphraseString: Swift.String, refreshDate: Foundation.Date = Date(), expirationDate: Foundation.Date = Date.distantFuture)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
extension BBCoreKit.BBPassphrase {
  public static var current: BBCoreKit.BBPassphrase? {
    get
    set(value)
  }
}
extension BBCoreKit.BBPassphrase {
  public static func fetchPassphrase() -> BBCoreKit.BBPassphrase?
  public static func storePassphraseToken(token: BBCoreKit.BBPassphrase)
  public static func clearStorage()
}
public enum BBCartItemStatus : Swift.Int {
  case inBasket
  case possibleItem
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct BBCartData {
  public var id: Swift.Int?
  public var name: Swift.String?
  public var deviceIdentifier: Swift.String?
  public var price: Swift.Float?
  public var brand: Swift.String?
  public var status: BBCoreKit.BBCartItemStatus?
}
extension BBCoreKit.BBCartData : Swift.Equatable {
  public static func == (lhs: BBCoreKit.BBCartData, rhs: BBCoreKit.BBCartData) -> Swift.Bool
}
public enum Timeout {
  case seconds(Foundation.TimeInterval)
  case none
}
@_hasMissingDesignatedInitializers public class BBIoTConnection {
  public func cancel()
  @objc deinit
}
extension BBCoreKit.BBIoTConnection : Swift.Equatable {
  public static func == (lhs: BBCoreKit.BBIoTConnection, rhs: BBCoreKit.BBIoTConnection) -> Swift.Bool
}
public protocol BBDeviceManagerDelegate {
  func didStartScanning()
  func didConnect(device: BBCoreKit.BBIoTDevice)
  func didFindDevice(device: BBCoreKit.BBIoTDevice)
  func didSetDevice(device: BBCoreKit.BBIoTDevice)
}
extension BBCoreKit.BBDeviceManagerDelegate {
  public func didStartScanning()
  public func didFindDevice(device: BBCoreKit.BBIoTDevice)
  public func didConnect(device: BBCoreKit.BBIoTDevice)
  public func didSetDevice(device: BBCoreKit.BBIoTDevice)
}
public class BBDeviceManager {
  public var delegate: BBCoreKit.BBDeviceManagerDelegate?
  required public init()
  public func armDeviceWith(identifier: Swift.String)
  @objc deinit
}
public enum BBRequestResult<T> where T : BBCoreKit.BBRequestProtocol {
  case success(response: T.Response, responseCode: Swift.Int)
  case failed(Swift.Error?)
}
extension CoreBluetooth.CBService {
  public func characteristic(with uuid: BBCoreKit.BBIoTIdentifier) -> CoreBluetooth.CBCharacteristic?
}
public enum BBKKeychainStorageAttributeKey {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleAlways
  case accessibleWhenPasscodeSetThisDeviceOnly
  case accessibleAlwaysThisDeviceOnly
  public static func == (a: BBCoreKit.BBKKeychainStorageAttributeKey, b: BBCoreKit.BBKKeychainStorageAttributeKey) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class BBNFCNDEFReaderSession : ObjectiveC.NSObject, CoreNFC.NFCNDEFReaderSessionDelegate {
  public var payloadMessage: CoreNFC.NFCNDEFMessage!
  public var delegate: BBCoreKit.BBNFCNDEFReaderSessionDelegate?
  public var nfcSession: CoreNFC.NFCNDEFReaderSession!
  @objc deinit
}
public protocol BBNFCNDEFReaderSessionDelegate {
  func bbNFCNDEFReaderSessionDidRead(identifier: Swift.String, error: Swift.String)
  func bbNFCNDEFReaderSessionDidWrite(identifier: Swift.String, type: BBCoreKit.NFCTypes, error: Swift.String)
  func bbNFCNDEFReaderSessionDidSecureWrite(identifier: Swift.String, otc: Swift.String, commandType: Swift.String, error: Swift.String)
}
extension BBCoreKit.BBNFCNDEFReaderSessionDelegate {
  public func bbNFCNDEFReaderSessionDidRead(identifier: Swift.String, error: Swift.String)
  public func bbNFCNDEFReaderSessionDidWrite(identifier: Swift.String, type: BBCoreKit.NFCTypes, error: Swift.String)
  public func bbNFCNDEFReaderSessionDidSecureWrite(identifier: Swift.String, otc: Swift.String, commandType: Swift.String, error: Swift.String)
}
@available(iOS 13.0, *)
extension BBCoreKit.BBNFCNDEFReaderSession {
  @objc dynamic public func readerSessionDidBecomeActive(_ session: CoreNFC.NFCNDEFReaderSession)
  @objc dynamic public func readerSession(_ session: CoreNFC.NFCNDEFReaderSession, didInvalidateWithError error: Swift.Error)
  @objc dynamic public func readerSession(_ session: CoreNFC.NFCNDEFReaderSession, didDetectNDEFs messages: [CoreNFC.NFCNDEFMessage])
  public func didWrite()
  @available(iOS 13.0, *)
  @objc dynamic public func readerSession(_ session: CoreNFC.NFCNDEFReaderSession, didDetect tags: [CoreNFC.NFCNDEFTag])
  public func read(infoMessage: Swift.String, successMessage: Swift.String)
  public func write(_ type: BBCoreKit.NFCTypes, infoMessage: Swift.String, successMessage: Swift.String)
  public func secureWrite(_ secureKey: Swift.String, infoMessage: Swift.String, successMessage: Swift.String)
}
extension BBCoreKit.DeviceType : Swift.Equatable {}
extension BBCoreKit.DeviceType : Swift.Hashable {}
extension BBCoreKit.BBIoTIdentifier : Swift.Equatable {}
extension BBCoreKit.BBIoTIdentifier : Swift.Hashable {}
extension BBCoreKit.BBIoTIdentifier : Swift.RawRepresentable {}
extension BBCoreKit.BBRequestHTTPMethod : Swift.Equatable {}
extension BBCoreKit.BBRequestHTTPMethod : Swift.Hashable {}
extension BBCoreKit.BBRequestHTTPMethod : Swift.RawRepresentable {}
extension BBCoreKit.NFCTypes : Swift.Equatable {}
extension BBCoreKit.NFCTypes : Swift.Hashable {}
extension BBCoreKit.BBEncoderError : Swift.Equatable {}
extension BBCoreKit.BBEncoderError : Swift.Hashable {}
extension BBCoreKit.BBEnvironmentURL : Swift.Equatable {}
extension BBCoreKit.BBEnvironmentURL : Swift.Hashable {}
extension BBCoreKit.BBEnvironmentURL : Swift.RawRepresentable {}
extension BBCoreKit.BBCartItemStatus : Swift.Equatable {}
extension BBCoreKit.BBCartItemStatus : Swift.Hashable {}
extension BBCoreKit.BBCartItemStatus : Swift.RawRepresentable {}
extension BBCoreKit.BBKKeychainStorageAttributeKey : Swift.Equatable {}
extension BBCoreKit.BBKKeychainStorageAttributeKey : Swift.Hashable {}
